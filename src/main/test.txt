for {
    chat <- createPrivateChat("bromel")
    _ <- sendFirstStep
    secondStep <- getSecondStep
    _ <- sendThirdStep
} yield verify()

clientSend -> ResultHandler(
    onSuccess: TDApiObject => sendFirstStep -> ResultHandler(
        onSuccess: TDApiObject => getSecondStep
        )
    )

Handler(nextStep: sendFirstStep, resultParser: TDApi.Object => F[TDApi.Object], nextHandler: Handler)

operation: TDApi.Object => client.send

ResultHandler[TDApi.Object(ReturnType)]
---------------------------------------

val commandToSend
val parser: TDApi.Object => F[TDApi.Object]
val resHandler = ResultHandler {
    def onResult(res): F[Unit] = parser(res)
}
val execute: F[Unit] = client.send(command, resHandler)

def flatMap(newRes: TDApi.Object => ResultHandler[TdApi.Object]) = new ResultHandler {
    val commandToSend = this.commandToSend
    val parser = this.parser
    val resHandler = newRes(this.parser(res)).resHandler
    client.send(command, ResultHandler {
        def onResult(result): F[Unit] = newRes(this.parser(res)).execute
    })
}

client.send(commandToSend, new ResultHandler {
    def onResult(res): F[Unit] = parser(res).flatMap(newRes(_).execute)
})

client.send(commandToSend, )

flatmap(A: TDApi.Object => ResultHandler[TDApi.Object]) =

